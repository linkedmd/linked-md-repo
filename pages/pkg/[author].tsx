import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { tw } from 'twind'
import { getAuthor } from '../../lib/database'
import Link from 'next/link'
import Breadcrumbs from '../../components/Breadcrumbs'
import { formatAddressOrEnsName } from '../../lib/ens'

const Package: NextPage = ({ author }) => {
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {author.address ? (
        <>
          <Breadcrumbs author={author} />
          <h3 className={tw`text-2xl my-8`}>All packages</h3>
          <table className={tw`border-collapse table-auto w-full text-sm`}>
            <thead>
              <tr>
                <th
                  className={tw`border-b dark:border-slate-600 font-medium pr-4 pt-0 pb-3 text-slate-400 dark:text-slate-200 text-left`}
                >
                  Name
                </th>
              </tr>
            </thead>
            <tbody className={tw`bg-white dark:bg-slate-800`}>
              {author.publishedPackages.map((pkg, i) => (
                <Link
                  href={`/pkg/${author.ensName || author.address}/${pkg.name}`}
                  key={i}
                >
                  <tr className={tw`cursor-pointer hover:bg-gray-100`}>
                    <td
                      className={tw`border-b border-slate-100 dark:border-slate-700 py-4 text-slate-500 dark:text-slate-400`}
                    >
                      {pkg.name}
                    </td>
                  </tr>
                </Link>
              ))}
            </tbody>
          </table>
        </>
      ) : (
        <>Author not found</>
      )}
    </div>
  )
}

export async function getServerSideProps({ query }) {
  const { author } = query
  const formattedAuthor = await formatAddressOrEnsName(author)
  if (formattedAuthor.ensName && formattedAuthor.ensName !== author) {
    return {
      redirect: {
        destination: `/pkg/${formattedAuthor.ensName}`,
        permanent: false,
      },
    }
  }

  let authorResult = await getAuthor({
    authorAddress: formattedAuthor.address,
  })

  authorResult.ensName = formattedAuthor.ensName

  return {
    props: { author: authorResult },
  }
}

export default Package
